package rook_test

import (
	"github.com/reiver/go-rook"

	"bytes"
	"io"
	"reflect"

	"testing"
)

func TestDLEWrite(t *testing.T) {

	tests := []struct{
		Data []byte
		Expected []byte
	}{
		{
			Data:     nil,
			Expected: []byte(nil),
		},
		{
			Data:     []byte{},
			Expected: []byte(nil),
		},



		{
			Data:     []byte{0x00},
			Expected: []byte{0x00},
		},
		{
			Data:     []byte{0x00,0x01},
			Expected: []byte{0x00,0x01},
		},
		{
			Data:     []byte{0x00,0x01,0x02},
			Expected: []byte{0x00,0x01,0x02},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03},
			Expected: []byte{0x00,0x01,0x02,0x03},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19,0x1a},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19,0x1a},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19,0x1a,0x1b},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19,0x1a,0x1b},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21},
		},
		{
			Data:     []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,     0x11,0x12,0x13,0x14,0x15,     0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22},
			Expected: []byte{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x10,0x11,0x12,0x13,0x14,0x15,0x10,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22},
		},



		{
			Data:     []byte{0x90},
			Expected: []byte{0x90},
		},



		{
			Data:     []byte{0x96},
			Expected: []byte{0x96},
		},
	}

	for testNumber, test := range tests {

		var buffer bytes.Buffer
		var w io.Writer = &buffer

		rook.DLEWrite(w, test.Data)

		expected := test.Expected
		actual   := buffer.Bytes()

		if !reflect.DeepEqual(expected, actual) {
			t.Errorf("For test #%d, the actual value was not what was expected.", testNumber)
			t.Logf("EXPECTED: %#v", expected)
			t.Logf("ACTUAL:   %#v", actual)
			continue
		}
	}
}

